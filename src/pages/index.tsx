import Head from "next/head";
import { useEffect, useState, useContext, useRef, useCallback } from "react";
import { MyContext } from "../../src/pages/_app";
import Slider from "../components/Slider";
import Dropdown from "@/components/Dropdown";
import DraggableSlider from "@/components/DraggableSlider";
import Loading from "@/components/Loading";

// Import Swiper styles
import "swiper/css";
import "swiper/css/grid";
import "swiper/css/pagination";

// Define the types for our churches and location
interface Church {
  Name: string;
  Location: string; // Format: "latitude, longitude"
}

// Function to calculate distance using Haversine formula
function calculateDistances(churches: Church[], myLocation: any): any {
  const newChurchesArray: any = [];

  const myLat = myLocation.lat;
  const myLng = myLocation.lng;

  // Function to calculate distance between two points using Haversine formula
  function getDistanceInKm(
    lat1: number,
    lon1: number,
    lat2: number,
    lon2: number
  ): number {
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLon = ((lon2 - lon1) * Math.PI) / 180;

    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
        Math.cos((lat2 * Math.PI) / 180) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c; // Distance in km

    return distance;
  }

  // Calculate and print distance for each church
  churches.forEach((church) => {
    const [churchLat, churchLng] = church.Location.split(",").map((coord) =>
      parseFloat(coord.trim())
    );
    console.log("ðŸš€ ~ calculateDistances ~ churchLng:", churchLng);
    console.log("ðŸš€ ~ calculateDistances ~ churchLat:", churchLat);
    const distance = getDistanceInKm(myLat, myLng, churchLat, churchLng);
    const updatedChurch = Object.assign(church);
    updatedChurch.distance = Math.round(distance);
    newChurchesArray.push(updatedChurch);
    console.log(
      `${church.Name} has ${distance.toFixed(2)} kilometers of distance`
    );
  });

  return newChurchesArray;
}

export default function Home({ churches }: any) {
  const [updatedChurches, setUpdatedChurches] = useState<any>([]);
  const [filteredChurches, setFilteredChurches] = useState<any>([]);
  const [activeInput, setActiveInput] = useState(false);
  const [initialLoading, setInitialLoading] = useState(true);
  const searchInputRef = useRef(null);
  const filter = useRef<{ [key: string]: string | number | boolean | null }>(
    {}
  ); // Initialize as an empty object
  const { currentPosition } = useContext(MyContext);

  // Handle search input changes
  const handleSearch = useCallback(
    (key: string, value: string | number | boolean | null) => {
      // Update filter state
      if (value !== undefined && value !== null && value !== "") {
        filter.current[key] = value;
      } else {
        delete filter.current[key];
      }

      const filterKeys = Object.keys(filter.current);

      // Filter churches based on search term
      const filtered = updatedChurches.filter((church: any) => {
        let checks = 0;
        filterKeys.forEach((k) => {
          const filterValue = filter.current[k];

          if (
            typeof filterValue === "string" &&
            church[k].toLowerCase().includes(filterValue)
          ) {
            checks = checks + 1;
          } else if (
            typeof filterValue === "number" &&
            filterValue >= church[k]
          ) {
            // It's distance
            checks = checks + 1;
          }
          if (typeof filterValue === "boolean" && church[k] === filterValue) {
            checks = checks + 1;
          }
        });

        return checks === filterKeys.length;
      });

      setFilteredChurches(filtered);
    },
    [filter, updatedChurches, setFilteredChurches]
  );

  useEffect(() => {
    if (
      (currentPosition?.lat && currentPosition?.lng) ||
      currentPosition.error
    ) {
      if (currentPosition.error) {
        setUpdatedChurches(churches);
        setFilteredChurches(churches);
        setInitialLoading(false);
      } else {
        const updatedChurchesArray = calculateDistances(
          churches,
          currentPosition
        );
        setUpdatedChurches(updatedChurchesArray);
        handleSearch("distance", 50);
        setInitialLoading(false);
      }
    }
  }, [churches, currentPosition, handleSearch]);

  return (
    <>
      <Head>
        <title>Localizador de Iglesias</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="max-w-7xl mx-auto p-5 w-full">
        <div
          className="title-container"
          style={{ maxWidth: "1200px", margin: "auto" }}
        >
          <h1
            style={{ fontSize: "2rem", fontWeight: "700" }}
            className="mb-8 text-center"
          >
            Iglesias de Asuncion
          </h1>

          <input
            placeholder="Busca una iglesia"
            onChange={(e) => {
              const inputValue = e.target.value.trim().toLowerCase();
              handleSearch("Name", inputValue);
            }}
            ref={searchInputRef}
          />

          {currentPosition.error ? null : (
            <DraggableSlider handleSearch={handleSearch} />
          )}

          <div className="dropdown-container flex justify-center gap-4 pt-4">
            <Dropdown
              text="Bautismo"
              type="boolean"
              name="Baptism"
              handleSearch={handleSearch}
            />

            <Dropdown
              text="Primera Comunion"
              type="boolean"
              name="FirstCommunion"
              handleSearch={handleSearch}
            />

            <Dropdown
              text="Confirmacion"
              type="boolean"
              name="Confirmation"
              handleSearch={handleSearch}
            />

            <Dropdown
              text="Matrimonio"
              type="boolean"
              name="Wedding"
              handleSearch={handleSearch}
            />
          </div>

          {activeInput ? (
            <button
              onClick={() => {
                setFilteredChurches(churches);
                setActiveInput(false);
                // @ts-ignore
                searchInputRef.current.value = "";
              }}
            >
              X
            </button>
          ) : null}
        </div>

        {initialLoading ? (
          <div className="pt-12">
            <Loading />
          </div>
        ) : null}

        {!initialLoading && filteredChurches.length > 0 ? (
          <Slider content={filteredChurches} />
        ) : null}
        {!initialLoading && filteredChurches.length === 0 ? (
          <div
            style={{ maxWidth: "1200px", margin: "auto", marginTop: "2rem" }}
          >
            <h2
              style={{
                color: "white",
                fontSize: "1.2rem",
              }}
            >
              No hay Iglesias para mostrar
            </h2>
          </div>
        ) : null}
      </main>
    </>
  );
}

export async function getStaticProps() {
  const res = await fetch(process.env.NEXT_PUBLIC_CHURCHES_API_URL as string);
  const churches: any = await res.json();

  return {
    props: {
      churches: churches,
    },
  };
}
